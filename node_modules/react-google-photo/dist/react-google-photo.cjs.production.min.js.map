{"version":3,"file":"react-google-photo.cjs.production.min.js","sources":["../src/arrow.tsx","../src/useEventListener.ts","../src/google-photo.tsx"],"sourcesContent":["import React from 'react';\n\ninterface IconProps {\n  className?: string;\n}\n\nexport function CloseArrow({ className, ...props }: IconProps) {\n  return (\n    <div className={className} {...props}>\n      <svg fill=\"#ffffff\" width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\" />\n      </svg>\n    </div>\n  );\n}\n\nexport function PrevArrowButton({ className, ...props }: IconProps) {\n  return (\n    <div className={className} {...props}>\n      <svg fill=\"#ffffff\" width=\"36px\" height=\"36px\" viewBox=\"0 0 24 24\">\n        <path d=\"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z\" />\n      </svg>\n    </div>\n  );\n}\n\nexport function NextArrowButton({ className, ...props }: IconProps) {\n  return (\n    <div className={className} {...props}>\n      <svg fill=\"#ffffff\" width=\"36px\" height=\"36px\" viewBox=\"0 0 24 24\">\n        <path d=\"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z\" />\n      </svg>\n    </div>\n  );\n}\n","import { useRef, useEffect } from 'react';\n\n// Inspired by https://usehooks.com/useEventListener/\n\nexport const useEventListener = <T>(\n  active: boolean,\n  eventName: string,\n  handler: (event: T) => void,\n  element: any\n) => {\n  // Create a ref that stores handler\n  const savedHandler = useRef<(event: T) => void>();\n\n  // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(\n    () => {\n      if (!element || !element.addEventListener) {\n        return;\n      }\n\n      // Create event listener that calls handler function stored in ref\n      const eventListener = (event: T) => savedHandler.current!(event);\n\n      if (active) {\n        // Add event listener\n        element.addEventListener(eventName, eventListener);\n      }\n\n      // Remove event listener on cleanup\n      return () => {\n        element.removeEventListener(eventName, eventListener);\n      };\n    },\n    // Re-run if eventName or element changes\n    [active, eventName, element]\n  );\n};\n","import React, { useState, useRef, useEffect, CSSProperties } from 'react';\nimport ReactDom from 'react-dom';\nimport noScroll from 'no-scroll';\nimport cx from 'classnames';\nimport screenfull from 'screenfull';\nimport { CloseArrow, PrevArrowButton, NextArrowButton } from './arrow';\nimport { useEventListener } from './useEventListener';\n\nconst keycodes = {\n  esc: 27,\n  left: 37,\n  right: 39,\n};\n\nconst classes = {\n  overlay: 'react-google-photo-overlay',\n  column: 'react-google-photo-column',\n  leftColumn: 'react-google-photo-left-column',\n  rightColumn: 'react-google-photo-right-column',\n  arrowButton: 'react-google-photo-arrow-button',\n  arrowButtonHide: 'react-google-photo-arrow-button-hide',\n  arrowButtonLeft: 'react-google-photo-arrow-button-left',\n  arrowButtonRight: 'react-google-photo-arrow-button-right',\n  arrowButtonReturn: 'react-google-photo-arrow-button-return',\n  image: 'react-google-photo-overlay-image',\n  imageOpen: 'react-google-photo-overlay-image-open',\n  animationIn: 'react-google-photo-fade-in',\n  animationOut: 'react-google-photo-fade-out',\n};\n\nconst isBrowser = typeof window !== 'undefined';\n\nenum Direction {\n  Prev,\n  Next,\n}\n\ninterface GooglePhotoProps {\n  /**\n   * Control if GooglePhoto is open or not.\n   */\n  open: boolean;\n  /**\n   * An array containing valid images\n   */\n  src: {\n    /**\n     * Url of the media.\n     */\n    src: string;\n    /**\n     * Height of the media.\n     */\n    height: number;\n    /**\n     * Width of the media.\n     */\n    width: number;\n    /**\n     * Alt of the media.\n     */\n    alt?: string;\n  }[];\n  /**\n   * Index of source to display.\n   */\n  srcIndex?: number;\n  /**\n   * Should open on fullscreen mode.\n   * Default to false.\n   */\n  fullscreen?: boolean;\n  /**\n   * Enable left and right arrow navigation.\n   * Default to true.\n   */\n  keyboardNavigation?: boolean;\n  /**\n   * Should close when user press esc key.\n   * Default to true.\n   */\n  closeOnEsc?: boolean;\n  /**\n   * Timeout before hidding the actions buttons when mouse do not move (milliseconds).\n   * Default to 5000.\n   */\n  mouseIdleTimeout?: number;\n  /**\n   * Animation duration in milliseconds.\n   * Default to 250.\n   */\n  animationDuration?: number;\n  /**\n   * An object containing classNames to style the lightbox.\n   */\n  classNames?: {\n    overlay?: string;\n    image?: string;\n    animationIn?: string;\n    animationOut?: string;\n  };\n  /**\n   * Function called when GooglePhoto is requested to be closed.\n   */\n  onClose: () => void;\n  /**\n   * Function called when the index of the displayed image is changing.\n   */\n  onChangeIndex?: (index: number) => void;\n}\n\nexport const GooglePhoto = ({\n  open,\n  src,\n  srcIndex: srcIndexProp = 0,\n  fullscreen,\n  keyboardNavigation = true,\n  closeOnEsc = true,\n  mouseIdleTimeout = 5000,\n  animationDuration = 250,\n  classNames,\n  onClose,\n  onChangeIndex,\n}: GooglePhotoProps) => {\n  const refContainer = useRef<HTMLDivElement | null>(null);\n  const refTimeoutMouseIdle = useRef<NodeJS.Timeout | null>(null);\n  const [showPortal, setShowPortal] = useState(open);\n  const [windowSizes, setWindowSizes] = useState<{\n    width: number;\n    height: number;\n  }>({\n    width: isBrowser ? window.innerWidth : 0,\n    height: isBrowser ? window.innerHeight : 0,\n  });\n  const [mouseIdle, setMouseIdle] = useState(false);\n  const [srcIndex, setSrcIndex] = useState(srcIndexProp);\n\n  // Lazily create the ref instance\n  // https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n  if (refContainer.current === null && isBrowser) {\n    refContainer.current = document.createElement('div');\n  }\n\n  const handleOpen = () => {\n    noScroll.on();\n    window.addEventListener('resize', handleWindowResize);\n    if (refContainer.current && !document.body.contains(refContainer.current)) {\n      document.body.appendChild(refContainer.current);\n    }\n    if (fullscreen && screenfull.isEnabled) {\n      screenfull.request();\n      screenfull.on('change', handleScreenfullChange);\n    }\n  };\n\n  const handleClose = () => {\n    window.removeEventListener('resize', handleWindowResize);\n    if (refContainer.current && document.body.contains(refContainer.current)) {\n      document.body.removeChild(refContainer.current);\n    }\n    if (screenfull.isEnabled) {\n      screenfull.exit();\n      screenfull.off('change', handleScreenfullChange);\n    }\n    noScroll.off();\n  };\n\n  const handleKeydown = (e: KeyboardEvent) => {\n    if (e.keyCode === keycodes.left && keyboardNavigation) {\n      handleChangeIndex(Direction.Prev);\n    } else if (e.keyCode === keycodes.right && keyboardNavigation) {\n      handleChangeIndex(Direction.Next);\n    } else if (e.keyCode === keycodes.esc && closeOnEsc) {\n      onClose();\n    }\n  };\n\n  useEventListener(\n    open,\n    'keydown',\n    handleKeydown,\n    isBrowser ? document : undefined\n  );\n\n  const handleMousemove = () => {\n    // Hide the actions buttons when move do not move for x seconds\n    if (refTimeoutMouseIdle.current) {\n      clearTimeout(refTimeoutMouseIdle.current);\n    }\n    if (mouseIdle === true) {\n      setMouseIdle(false);\n    }\n    refTimeoutMouseIdle.current = setTimeout(() => {\n      setMouseIdle(true);\n    }, mouseIdleTimeout);\n  };\n\n  useEventListener(\n    open,\n    'mousemove',\n    handleMousemove,\n    isBrowser ? document.querySelector('*')! : undefined\n  );\n\n  // We listen to the srcIndexProp to update the internal state if the user manage the component\n  useEffect(() => {\n    setSrcIndex(srcIndexProp);\n  }, [srcIndexProp]);\n\n  useEffect(() => {\n    // When the modal is rendered first time we want to block the scroll\n    if (open) {\n      handleOpen();\n    }\n    return () => {\n      // When the component is unmounted directly we want to unblock the scroll\n      if (showPortal) {\n        handleClose();\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    // If the open prop is changing, we need to open the modal\n    if (open && !showPortal) {\n      setShowPortal(true);\n      handleOpen();\n    }\n  }, [open]);\n\n  const handleScreenfullChange = () => {\n    if (screenfull.isEnabled && !screenfull.isFullscreen && open) {\n      onClose();\n    }\n  };\n\n  const handleWindowResize = () => {\n    setWindowSizes({ width: window.innerWidth, height: window.innerHeight });\n  };\n\n  const handleChangeIndex = (direction: Direction) => {\n    if (direction === Direction.Prev && srcIndex !== 0) {\n      const newIndex = srcIndex - 1;\n      onChangeIndex ? onChangeIndex(newIndex) : setSrcIndex(newIndex);\n    } else if (direction === Direction.Next && src[srcIndex + 1]) {\n      const newIndex = srcIndex + 1;\n      onChangeIndex ? onChangeIndex(newIndex) : setSrcIndex(newIndex);\n    }\n  };\n\n  const handleClickCloseArrow = () => {\n    onClose();\n  };\n\n  const handleAnimationEnd = () => {\n    if (!open) {\n      setShowPortal(false);\n      handleClose();\n    }\n\n    // if (onAnimationEnd) {\n    //   onAnimationEnd();\n    // }\n  };\n\n  const image = src[srcIndex];\n  const wrapperImageStyle: CSSProperties = {\n    position: 'absolute',\n    overflow: 'hidden',\n    userSelect: 'none',\n  };\n  let imageWidth = image.width;\n  let imageHeight = image.height;\n  // Adjust image ratio max with window size\n  if (imageWidth > windowSizes.width) {\n    const ratio = windowSizes.width / imageWidth;\n    imageHeight *= ratio;\n    imageWidth *= ratio;\n  }\n  if (imageHeight > windowSizes.height) {\n    const ratio = windowSizes.height / imageHeight;\n    imageHeight *= ratio;\n    imageWidth *= ratio;\n  }\n\n  if (imageHeight > imageWidth || imageWidth < windowSizes.width) {\n    wrapperImageStyle.left = (windowSizes.width - imageWidth) / 2;\n    wrapperImageStyle.height = windowSizes.height;\n    wrapperImageStyle.width = imageWidth;\n  } else {\n    wrapperImageStyle.top = (windowSizes.height - imageHeight) / 2;\n    wrapperImageStyle.height = imageHeight;\n    wrapperImageStyle.width = windowSizes.width;\n  }\n  if (windowSizes.height > imageHeight) {\n    wrapperImageStyle.height = imageHeight;\n    wrapperImageStyle.top = (windowSizes.height - imageHeight) / 2;\n  } else if (windowSizes.width > imageWidth) {\n    wrapperImageStyle.height = windowSizes.height;\n    wrapperImageStyle.left = (windowSizes.width - imageWidth) / 2;\n  }\n\n  return showPortal && refContainer.current\n    ? ReactDom.createPortal(\n        <div\n          className={cx(classes.overlay, classNames?.overlay)}\n          style={{\n            animation: `${\n              open\n                ? classNames?.animationIn ?? classes.animationIn\n                : classNames?.animationOut ?? classes.animationOut\n            } ${animationDuration}ms`,\n          }}\n          onAnimationEnd={handleAnimationEnd}\n        >\n          <div style={wrapperImageStyle}>\n            {src.map((source, index) => (\n              <img\n                key={index}\n                src={source.src}\n                alt={source.alt}\n                width={wrapperImageStyle.width}\n                height={wrapperImageStyle.height}\n                className={cx(classes.image, classNames?.image, {\n                  [classes.imageOpen]: index === srcIndex,\n                })}\n              />\n            ))}\n          </div>\n          {srcIndex !== 0 && (\n            <div\n              className={cx(classes.column, classes.leftColumn)}\n              onClick={() => handleChangeIndex(Direction.Prev)}\n            >\n              <PrevArrowButton\n                className={cx(classes.arrowButton, classes.arrowButtonLeft, {\n                  [classes.arrowButtonHide]: mouseIdle,\n                })}\n              />\n            </div>\n          )}\n          {src[srcIndex + 1] && (\n            <div\n              className={cx(classes.column, classes.rightColumn)}\n              onClick={() => handleChangeIndex(Direction.Next)}\n            >\n              <NextArrowButton\n                className={cx(classes.arrowButton, classes.arrowButtonRight, {\n                  [classes.arrowButtonHide]: mouseIdle,\n                })}\n              />\n            </div>\n          )}\n          <div onClick={handleClickCloseArrow}>\n            <CloseArrow\n              className={cx(classes.arrowButtonReturn, {\n                [classes.arrowButtonHide]: mouseIdle,\n              })}\n            />\n          </div>\n        </div>,\n        refContainer.current\n      )\n    : null;\n};\n"],"names":["CloseArrow","className","props","React","fill","width","height","viewBox","d","PrevArrowButton","NextArrowButton","Direction","useEventListener","active","eventName","handler","element","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","isBrowser","window","GooglePhoto","open","src","srcIndex","srcIndexProp","fullscreen","keyboardNavigation","closeOnEsc","mouseIdleTimeout","animationDuration","classNames","onClose","onChangeIndex","refContainer","refTimeoutMouseIdle","useState","showPortal","setShowPortal","innerWidth","innerHeight","windowSizes","setWindowSizes","mouseIdle","setMouseIdle","setSrcIndex","document","createElement","handleOpen","noScroll","on","handleWindowResize","body","contains","appendChild","screenfull","isEnabled","request","handleScreenfullChange","handleClose","removeChild","exit","off","e","keyCode","handleChangeIndex","Prev","Next","undefined","clearTimeout","setTimeout","querySelector","isFullscreen","direction","newIndex","image","wrapperImageStyle","position","overflow","userSelect","imageWidth","imageHeight","ratio","left","top","ReactDom","createPortal","cx","overlay","style","animation","animationIn","animationOut","onAnimationEnd","map","source","index","key","alt","onClick"],"mappings":"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"}