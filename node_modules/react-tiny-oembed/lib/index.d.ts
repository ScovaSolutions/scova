/// <reference types="react" />
import { CSSProperties, ReactElement, ComponentType, DependencyList } from 'react';

interface EmbedProps {
    url: string;
    proxy?: string;
    style?: CSSProperties;
    options?: Partial<EmbedRequestOptions>;
    providers?: any[];
    FallbackElement?: ReactElement;
    LoadingFallbackElement?: ReactElement;
    ImgComponent?: ComponentType<{
        responce?: PhotoEmbedResponce;
    }>;
    LinkComponent?: ComponentType<{
        responce?: LinkEmbedResponce;
    }>;
}
interface CommonEmbedResponce {
    type: 'rich' | 'video' | 'link' | 'photo' | string;
    version: string;
    thumbnail_url?: string;
    thumbnail_width?: number;
    thumbnail_height?: number;
    title?: string;
    author_name?: string;
    author_url?: string;
    provider_name?: string;
    provider_url?: string;
    referrer?: string;
    cache_age?: number;
    [extras: string]: any;
}
interface PhotoEmbedResponce extends CommonEmbedResponce {
    type: 'photo';
    url: string;
    width: number;
    height: number;
}
interface VideoEmbedResponce extends CommonEmbedResponce {
    type: 'video';
    html: string;
    width: number;
    height: number;
}
interface RichEmbedResponce extends CommonEmbedResponce {
    type: 'rich';
    html: string;
    width: number;
    height: number;
}
interface LinkEmbedResponce extends CommonEmbedResponce {
    type: 'link';
}
declare type EmbedResponce = PhotoEmbedResponce | VideoEmbedResponce | RichEmbedResponce | LinkEmbedResponce;
interface EmbedRequestOptions {
    /** url of resource website */
    url: string;
    maxwidth?: number;
    maxheight?: number;
    format?: 'json';
    [extras: string]: any;
}
declare type GetReponceType = (options: EmbedRequestOptions) => EmbedResponce;

declare function Embed({ url, proxy, style, options, providers, ImgComponent, LinkComponent, FallbackElement, LoadingFallbackElement, }: EmbedProps): JSX.Element;

/**
 *
 * @param endpoint Like `https:\/\/www.youtube.com\/`
 * @param proxy  Like `https:\/\/cors-anywhere.heroku.app/{raw_url}`, {raw_url | url} is placeholder for url, {raw_url} isn't encoded whhere as {url} is
 * @param options params to the embed request
 */
declare function requestEmbed(proxy: string | undefined, providers: any[] | undefined, options: EmbedRequestOptions): Promise<EmbedResponce | undefined>;
/**
 * gets the oembed endpoint url from providers list
 * @param url // resource url for identifications
 * @param providers // if undefined uses default ones, but [] would mean not to use default ones
 */
declare function getEndpoint(url: string, providers: any[] | undefined): {
    base_url?: string;
    requestInterceptor?: Function;
    responceInterceptor?: Function;
    getResponce?: GetReponceType;
};

declare const providers: any[];

declare type Attributes = {
    [key: string]: string;
};
declare function useScript(html: string, attributes?: Attributes, deps?: DependencyList): void;

export default Embed;
export { CommonEmbedResponce, EmbedProps, EmbedRequestOptions, EmbedResponce, GetReponceType, LinkEmbedResponce, PhotoEmbedResponce, RichEmbedResponce, VideoEmbedResponce, providers as defaultProviders, getEndpoint, requestEmbed, useScript };
